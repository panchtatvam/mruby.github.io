I"êD<h1 id="executing-ruby-code-with-mruby">Executing Ruby code with mruby</h1>

<p><strong>originally written by <a href="http://bovensiepen.net/">Daniel Bovensiepen</a></strong></p>

<p>The traditional way to execute Ruby code is distributing the plain source code
and requiring a Ruby interpreter with lots of files to be installed.
mruby can be used like that too. So if you have experience with
another Ruby implementation you may know some of the examples listed here.
However with mruby you can also build standalone programs and compile to
bytecode which can be dumped and loaded.</p>

<p>A file called <code class="highlighter-rouge">test_program.rb</code> is used in some of the examples. Its content is:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s1">'hello world'</span>
</code></pre></div></div>

<h2 id="repl-mirb">REPL (mirb)</h2>

<p>Not exactly directly used for program execution but still,
Ruby code can be evaluated by using the <code class="highlighter-rouge">mirb</code> program:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ mruby/bin/mirb
mirb - Embeddable Interactive Ruby Shell

&gt; puts 'hello world'
hello world
 =&gt; nil
</code></pre></div></div>

<h3 id="pros--cons">Pros &amp; Cons</h3>

<p>âœ” direct feedback without any indirection like files</p>

<p>âœ˜ not usable for productive execution</p>

<p>âœ˜ the input needs to be parsed twice: first <code class="highlighter-rouge">mirb</code> checks if the code is
complete and afterwards <code class="highlighter-rouge">mirb</code> compiles it into bytecode and executes it</p>

<h2 id="source-code-rb">Source code (.rb)</h2>

<p>The probably most common way to run Ruby code is by passing a filename as
argument to an interpreter. In mruby thatâ€™s the <code class="highlighter-rouge">mruby</code> program:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ mruby/bin/mruby test_program.rb
hello world
</code></pre></div></div>

<h3 id="pros--cons-1">Pros &amp; Cons</h3>

<p>âœ” very simple development cycle: programming â†’ testing â†’ programming</p>

<p>âœ˜ Ruby code has to be provided to users</p>

<p>âœ˜ the <code class="highlighter-rouge">mruby</code> program and a file system is required</p>

<p>âœ˜ Ruby code has to be parsed and compiled to bytecode before its execution</p>

<h2 id="source-code-c">Source code (.c)</h2>

<p>Ruby code can also be written as a C string. This is similar to
the <code class="highlighter-rouge">-e</code> switch of the <code class="highlighter-rouge">mruby</code> program.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;mruby.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;mruby/compile.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span>
<span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">mrb_state</span> <span class="o">*</span><span class="n">mrb</span> <span class="o">=</span> <span class="n">mrb_open</span><span class="p">();</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">mrb</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* handle error */</span> <span class="p">}</span>
  <span class="c1">// mrb_load_string(mrb, str) to load from NULL terminated strings</span>
  <span class="c1">// mrb_load_nstring(mrb, str, len) for strings without null terminator or with known length</span>
  <span class="n">mrb_load_string</span><span class="p">(</span><span class="n">mrb</span><span class="p">,</span> <span class="s">"puts 'hello world'"</span><span class="p">);</span>
  <span class="n">mrb_close</span><span class="p">(</span><span class="n">mrb</span><span class="p">);</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>To compile and link:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ gcc -std=c99 -Imruby/include test_program.c -o test_program mruby/build/host/lib/libmruby.a -lm
</code></pre></div></div>

<p>To execute:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ./test_program
hello world
</code></pre></div></div>

<h3 id="pros--cons-2">Pros &amp; Cons</h3>

<p>âœ” simple development cycle:
programming â†’ compiling (<code class="highlighter-rouge">gcc</code>) â†’ testing â†’ programming</p>

<p>âœ” the program is fully standalone</p>

<p>âœ˜ additional boilerplate is needed to get the program up and running</p>

<p>âœ˜ Ruby code has to be parsed and compiled to bytecode before its execution</p>

<p>âœ˜ updating the Ruby code might require a recompilation of the C code or
an advanced updating mechanism</p>

<h2 id="bytecode-mrb">Bytecode (.mrb)</h2>

<p>mruby provides a Java-like execution style by compiling to an
intermediate representation form which will then be executed.</p>

<p>The first step is to compile the source code to bytecode with the <code class="highlighter-rouge">mrbc</code> program:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ mruby/bin/mrbc test_program.rb
</code></pre></div></div>

<p>This will produce a file called <code class="highlighter-rouge">test_program.mrb</code> which contains the
intermediate representation of the previously given Ruby code:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ hexdump -C test_program.mrb
00000000  52 49 54 45 30 30 30 33  e1 c0 00 00 00 65 4d 41  |RITE0003.....eMA|
00000010  54 5a 30 30 30 30 49 52  45 50 00 00 00 47 30 30  |TZ0000IREP...G00|
00000020  30 30 00 00 00 3f 00 01  00 04 00 00 00 00 00 04  |00...?..........|
00000030  00 80 00 06 01 00 00 3d  00 80 00 a0 00 00 00 4a  |.......=.......J|
00000040  00 00 00 01 00 00 0b 68  65 6c 6c 6f 20 77 6f 72  |.......hello wor|
00000050  6c 64 00 00 00 01 00 04  70 75 74 73 00 45 4e 44  |ld......puts.END|
00000060  00 00 00 00 08                                    |.....|
00000065
</code></pre></div></div>

<p>This file can be executed by the <code class="highlighter-rouge">mruby</code> program or the <code class="highlighter-rouge">mrb_load_irep_file()</code>
function. The <code class="highlighter-rouge">-b</code> switch tells the program that the file is bytecode rather than
plain Ruby code:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ mruby/bin/mruby -b test_program.mrb
hello world
</code></pre></div></div>

<h3 id="pros--cons-3">Pros &amp; Cons</h3>

<p>âœ” Ruby code doesnâ€™t have to be provided to users</p>

<p>âœ” no Ruby code has to be parsed</p>

<p>âœ” bytecode can easily be updated by replacing the .mrb file</p>

<p>âœ˜ complex development cycle:
programming â†’ compiling (<code class="highlighter-rouge">mrbc</code>) â†’ testing (<code class="highlighter-rouge">mruby</code>) â†’ programming</p>

<p>âœ˜ the <code class="highlighter-rouge">mruby</code> program and a file system is required</p>

<h2 id="bytecode-c">Bytecode (.c)</h2>

<p>This variant is interesting for those who want to integrate Ruby code directly
into their C code. It will create a C array containing the bytecode which you
then have to execute by yourself.</p>

<p>The first step is to compile the Ruby program. This is done by using <code class="highlighter-rouge">mrbc</code>
and its <code class="highlighter-rouge">-B</code> switch. An identifier for the array also has to be given:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ mruby/bin/mrbc -Btest_symbol test_program.rb
</code></pre></div></div>

<p>This creates a file called <code class="highlighter-rouge">test_program.c</code> containing the <code class="highlighter-rouge">test_symbol</code> array:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* dumped in little endian order.
   use `mrbc -E` option for big endian CPU. */</span>
<span class="cp">#include</span> <span class="cpf">&lt;stdint.h&gt;</span><span class="cp">
</span><span class="k">const</span> <span class="kt">uint8_t</span>
<span class="cp">#if defined __GNUC__
</span><span class="n">__attribute__</span><span class="p">((</span><span class="n">aligned</span><span class="p">(</span><span class="mi">4</span><span class="p">)))</span>
<span class="cp">#elif defined _MSC_VER
</span><span class="kr">__declspec</span><span class="p">(</span><span class="n">align</span><span class="p">(</span><span class="mi">4</span><span class="p">))</span>
<span class="cp">#endif
</span><span class="n">test_symbol</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
<span class="mh">0x45</span><span class="p">,</span><span class="mh">0x54</span><span class="p">,</span><span class="mh">0x49</span><span class="p">,</span><span class="mh">0x52</span><span class="p">,</span><span class="mh">0x30</span><span class="p">,</span><span class="mh">0x30</span><span class="p">,</span><span class="mh">0x30</span><span class="p">,</span><span class="mh">0x33</span><span class="p">,</span><span class="mh">0x73</span><span class="p">,</span><span class="mh">0x0d</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x65</span><span class="p">,</span><span class="mh">0x4d</span><span class="p">,</span><span class="mh">0x41</span><span class="p">,</span>
<span class="mh">0x54</span><span class="p">,</span><span class="mh">0x5a</span><span class="p">,</span><span class="mh">0x30</span><span class="p">,</span><span class="mh">0x30</span><span class="p">,</span><span class="mh">0x30</span><span class="p">,</span><span class="mh">0x30</span><span class="p">,</span><span class="mh">0x49</span><span class="p">,</span><span class="mh">0x52</span><span class="p">,</span><span class="mh">0x45</span><span class="p">,</span><span class="mh">0x50</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x47</span><span class="p">,</span><span class="mh">0x30</span><span class="p">,</span><span class="mh">0x30</span><span class="p">,</span>
<span class="mh">0x30</span><span class="p">,</span><span class="mh">0x30</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x3f</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x01</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x04</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x04</span><span class="p">,</span>
<span class="mh">0x06</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x80</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x3d</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x01</span><span class="p">,</span><span class="mh">0xa0</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x80</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x4a</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span>
<span class="mh">0x00</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x01</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x0b</span><span class="p">,</span><span class="mh">0x68</span><span class="p">,</span><span class="mh">0x65</span><span class="p">,</span><span class="mh">0x6c</span><span class="p">,</span><span class="mh">0x6c</span><span class="p">,</span><span class="mh">0x6f</span><span class="p">,</span><span class="mh">0x20</span><span class="p">,</span><span class="mh">0x77</span><span class="p">,</span><span class="mh">0x6f</span><span class="p">,</span><span class="mh">0x72</span><span class="p">,</span>
<span class="mh">0x6c</span><span class="p">,</span><span class="mh">0x64</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x01</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x04</span><span class="p">,</span><span class="mh">0x70</span><span class="p">,</span><span class="mh">0x75</span><span class="p">,</span><span class="mh">0x74</span><span class="p">,</span><span class="mh">0x73</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x45</span><span class="p">,</span><span class="mh">0x4e</span><span class="p">,</span><span class="mh">0x44</span><span class="p">,</span>
<span class="mh">0x00</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x00</span><span class="p">,</span><span class="mh">0x08</span><span class="p">,</span>
<span class="p">};</span>
</code></pre></div></div>

<p>To execute this bytecode the following boilerplate has to be written (name this
file <code class="highlighter-rouge">test_stub.c</code>):</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;mruby.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;mruby/irep.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;test_program.c&gt;</span><span class="cp">
</span>
<span class="kt">int</span>
<span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">mrb_state</span> <span class="o">*</span><span class="n">mrb</span> <span class="o">=</span> <span class="n">mrb_open</span><span class="p">();</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">mrb</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* handle error */</span> <span class="p">}</span>
  <span class="n">mrb_load_irep</span><span class="p">(</span><span class="n">mrb</span><span class="p">,</span> <span class="n">test_symbol</span><span class="p">);</span>
  <span class="n">mrb_close</span><span class="p">(</span><span class="n">mrb</span><span class="p">);</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This will read the bytecode from the array and executes it immediately:</p>

<p>To compile and link:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ gcc -std=c99 -Imruby/include test_stub.c -o test_program mruby/build/host/lib/libmruby.a -lm
</code></pre></div></div>

<p>To execute:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ./test_program
hello world
</code></pre></div></div>

<h3 id="pros--cons-4">Pros &amp; Cons</h3>

<p>âœ” Ruby code doesnâ€™t have to be provided to users</p>

<p>âœ” no Ruby code has to be parsed</p>

<p>âœ” the program is fully standalone</p>

<p>âœ˜ even more complex development cycle: programming â†’ compiling (<code class="highlighter-rouge">mrbc</code>) â†’
integrating C code â†’ compiling (<code class="highlighter-rouge">gcc</code>) â†’ testing â†’ programming</p>

<p>âœ˜ additional boilerplate is needed to get the program up and running</p>

<p>âœ˜ updating the bytecode requires a recompilation of the C code or
an advanced updating mechanism</p>

<h2 id="fazit">Fazit</h2>

<p>The <strong>REPL (mirb)</strong> is mainly used during the early development.
<strong>Source code (.rb)</strong> is the most common usage of mruby these
days as it emphasises Ruby as a scripting language which can easily be
modified by changing the source code on the machine. <strong>Source code (.c)</strong>
is the easiest step to embed mruby into your own application.
<strong>Bytecode (.mrb)</strong> provides the feeling of a Java application, which can
be file based installed but doesnâ€™t provide access to the source code.
<strong>Bytecode (.c)</strong> is quite likely for many people the most complex way to
use mruby but at the same time it provides the most efficient way to
execute mruby code inside of program.</p>
:ET